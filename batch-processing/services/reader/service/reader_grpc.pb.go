// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: services/reader/service/reader.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReaderClient is the client API for Reader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReaderClient interface {
	ReadAndPublish(ctx context.Context, opts ...grpc.CallOption) (Reader_ReadAndPublishClient, error)
}

type readerClient struct {
	cc grpc.ClientConnInterface
}

func NewReaderClient(cc grpc.ClientConnInterface) ReaderClient {
	return &readerClient{cc}
}

func (c *readerClient) ReadAndPublish(ctx context.Context, opts ...grpc.CallOption) (Reader_ReadAndPublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &Reader_ServiceDesc.Streams[0], "/service.Reader/ReadAndPublish", opts...)
	if err != nil {
		return nil, err
	}
	x := &readerReadAndPublishClient{stream}
	return x, nil
}

type Reader_ReadAndPublishClient interface {
	Send(*ReaderRequest) error
	CloseAndRecv() (*ReaderResponse, error)
	grpc.ClientStream
}

type readerReadAndPublishClient struct {
	grpc.ClientStream
}

func (x *readerReadAndPublishClient) Send(m *ReaderRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *readerReadAndPublishClient) CloseAndRecv() (*ReaderResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ReaderResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReaderServer is the server API for Reader service.
// All implementations must embed UnimplementedReaderServer
// for forward compatibility
type ReaderServer interface {
	ReadAndPublish(Reader_ReadAndPublishServer) error
	mustEmbedUnimplementedReaderServer()
}

// UnimplementedReaderServer must be embedded to have forward compatible implementations.
type UnimplementedReaderServer struct {
}

func (UnimplementedReaderServer) ReadAndPublish(Reader_ReadAndPublishServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadAndPublish not implemented")
}
func (UnimplementedReaderServer) mustEmbedUnimplementedReaderServer() {}

// UnsafeReaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReaderServer will
// result in compilation errors.
type UnsafeReaderServer interface {
	mustEmbedUnimplementedReaderServer()
}

func RegisterReaderServer(s grpc.ServiceRegistrar, srv ReaderServer) {
	s.RegisterService(&Reader_ServiceDesc, srv)
}

func _Reader_ReadAndPublish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReaderServer).ReadAndPublish(&readerReadAndPublishServer{stream})
}

type Reader_ReadAndPublishServer interface {
	SendAndClose(*ReaderResponse) error
	Recv() (*ReaderRequest, error)
	grpc.ServerStream
}

type readerReadAndPublishServer struct {
	grpc.ServerStream
}

func (x *readerReadAndPublishServer) SendAndClose(m *ReaderResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *readerReadAndPublishServer) Recv() (*ReaderRequest, error) {
	m := new(ReaderRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Reader_ServiceDesc is the grpc.ServiceDesc for Reader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Reader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Reader",
	HandlerType: (*ReaderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadAndPublish",
			Handler:       _Reader_ReadAndPublish_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "services/reader/service/reader.proto",
}
